/*
 * banddecoder.c
 *
 *  Created on: 30 мая 2018 г.
 *      Author: dima (UR7HFO)
 */

#include "banddecoder.h"

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;

/* Band map */
uint32_t split_freq_160 = 1840000;
uint32_t split_freq_80 = 3600000;
uint32_t split_freq_40 = 7040000;
uint32_t split_freq_30 = 10120000;
uint32_t split_freq_20 = 14100000;
uint32_t split_freq_17 = 18111000;
uint32_t split_freq_15 = 21150000;
uint32_t split_freq_12 = 24931000;
uint32_t split_freq_10 = 28225000;
uint32_t split_freq_6 = 52000000;
uint32_t split_freq_2 = 144180000;
uint32_t split_freq_07 = 433400000;

uint32_t band160LowFreq = 1810000;
uint32_t band160HighFreq = 2000000;
uint32_t band80LowFreq = 3500000;
uint32_t band80HighFreq = 3800000;
uint32_t band40LowFreq = 7000000;
uint32_t band40HighFreq = 7300000;
uint32_t band30LowFreq = 10100000;
uint32_t band30HighFreq = 10150000;
uint32_t band20LowFreq = 14000000;
uint32_t band20HighFreq = 14350000;
uint32_t band17LowFreq = 18068000;
uint32_t band17HighFreq = 18318000;
uint32_t band15LowFreq = 21000000;
uint32_t band15HighFreq = 21450000;
uint32_t band12LowFreq = 24890000;
uint32_t band12HighFreq = 24990000;
uint32_t band10LowFreq = 28000000;
uint32_t band10HighFreq = 29700000;
uint32_t band6LowFreq = 50000000;
uint32_t band6HighFreq = 54000000;
uint32_t band2LowFreq = 144000000;
uint32_t band2HighFreq = 146000000;
uint32_t band07LowFreq = 430000000;
uint32_t band07HighFreq = 440000000;

uint8_t icom_request_buf[CIVREQUESTLEN];

uint8_t trxCatBuffer[KENWOODCATLEN];
uint8_t loggerCatBuffer[KENWOODCATLEN];

/* static const uint8_t uart_timeout = 100; */

/* Band pins */
__STATIC_INLINE void B160_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B160_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B80_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B80_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B40_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B40_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B30_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B30_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B20_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B20_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B17_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B17_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B15_OFF(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B15_ON(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B12_OFF(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B12_ON(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B10_OFF(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B10_ON(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void B6_OFF(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void B6_ON(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
	return;
}

/* Split relay pin */
__STATIC_INLINE void SPLIT_OFF(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void SPLIT_ON(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	return;
}

/* BCD out */
__STATIC_INLINE void BCD_A_OFF(void) {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void BCD_A_ON(void) {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void BCD_B_OFF(void) {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void BCD_B_ON(void) {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void BCD_C_OFF(void) {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void BCD_C_ON(void) {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	return;
}
__STATIC_INLINE void BCD_D_OFF(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	return;
}
__STATIC_INLINE void BCD_D_ON(void) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	return;
}

/* -------------------------------------------------------------------------------------- */
void WriteBand(uint8_t b) {
	switch (b) {
	case 160:
		B160_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 80:
		B80_ON();
		B160_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 40:
		B40_ON();
		B80_OFF();
		B160_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 30:
		B30_ON();
		B80_OFF();
		B40_OFF();
		B160_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 20:
		B20_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B160_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 17:
		B17_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B160_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 15:
		B15_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B160_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 12:
		B12_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B160_OFF();
		B10_OFF();
		B6_OFF();
		break;
	case 10:
		B10_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B160_OFF();
		B6_OFF();
		break;
	case 6:
		B6_ON();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B160_OFF();
		break;
	case 0:
		B160_OFF();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	default:
		B160_OFF();
		B80_OFF();
		B40_OFF();
		B30_OFF();
		B20_OFF();
		B17_OFF();
		B15_OFF();
		B12_OFF();
		B10_OFF();
		B6_OFF();
		break;
	}
}

/* --------------------------------------------------------------------------------------- */
bool WriteSplit(uint8_t b, uint32_t freq) {
	switch (b) {
	case 160:
		if (freq > split_freq_160) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 80:
		if (freq > split_freq_80) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 40:
		if (freq > split_freq_40) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 30:
		if (freq > split_freq_30) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 20:
		if (freq > split_freq_20) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 17:
		if (freq > split_freq_17) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 15:
		if (freq > split_freq_15) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 12:
		if (freq > split_freq_12) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 10:
		if (freq > split_freq_10) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 6:
		if (freq > split_freq_6) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 2:
		if (freq > split_freq_2) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	case 1:
		if (freq > split_freq_07) {
			SPLIT_ON();
			return true;
		} else {
			SPLIT_OFF();
			return false;
		}
		break;
	}
	return false;
}

/* ---------------------------------------------------------------------------------------- */
void bcdOut(uint8_t band) {
	switch (band) {
	case 160:
		/* 1 0 0 0  - 160 m */
		BCD_A_ON();
		BCD_B_OFF();
		BCD_C_OFF();
		BCD_D_OFF();
		break;
	case 80:
		/* 0 1 0 0  - 80 m */
		BCD_A_OFF();
		BCD_B_ON();
		BCD_C_OFF();
		BCD_D_OFF();
		break;
	case 40:
		/* 1 1 0 0  - 40 m */
		BCD_A_ON();
		BCD_B_ON();
		BCD_C_OFF();
		BCD_D_OFF();
		break;
	case 30:
		/* 0 0 1 0  - 30 m */
		BCD_A_OFF();
		BCD_B_OFF();
		BCD_C_ON();
		BCD_D_OFF();
		break;
	case 20:
		/* 1 0 1 0  - 20 m */
		BCD_A_ON();
		BCD_B_OFF();
		BCD_C_ON();
		BCD_D_OFF();
		break;
	case 17:
		/* 0 1 1 0  - 17 m */
		BCD_A_OFF();
		BCD_B_ON();
		BCD_C_ON();
		BCD_D_OFF();
		break;
	case 15:
		/* 1 1 1 0  - 15 m */
		BCD_A_ON();
		BCD_B_ON();
		BCD_C_ON();
		BCD_D_OFF();
		break;
	case 12:
		/* 0 0 0 1  - 12 m */
		BCD_A_OFF();
		BCD_B_OFF();
		BCD_C_OFF();
		BCD_D_ON();
		break;
	case 10:
		/* 1 0 0 1  - 10 m */
		BCD_A_ON();
		BCD_B_OFF();
		BCD_C_OFF();
		BCD_D_ON();
		break;
	case 6:
		/* 0 1 0 1  - 6 m */
		BCD_A_OFF();
		BCD_B_ON();
		BCD_C_OFF();
		BCD_D_ON();
		break;
	default:
		/* 0 0 0 0  - error */
		BCD_A_OFF();
		BCD_B_OFF();
		BCD_C_OFF();
		BCD_D_OFF();
		break;
	}
}

/* --------------------------------------------------------------------------------------- */
uint8_t GetBand(uint32_t freq) {
	/* 160 m */
	if ((freq >= band160LowFreq) && (freq <= band160HighFreq)) {
		return (160);
	}
	/* 80 m */
	if ((freq >= band80LowFreq) && (freq <= band80HighFreq)) {
		return (80);
	}
	/* 40 m */
	if ((freq >= band40LowFreq) && (freq <= band40HighFreq)) {
		return (40);
	}
	/* 30 m */
	if ((freq >= band30LowFreq) && (freq <= band30HighFreq)) {
		return (30);
	}
	/* 20 m */
	if ((freq >= band20LowFreq) && (freq <= band20HighFreq)) {
		return (20);
	}
	/* 17 m */
	if ((freq >= band17LowFreq) && (freq <= band17HighFreq)) {
		return (17);
	}
	/* 15 m */
	if ((freq >= band15LowFreq) && (freq <= band15HighFreq)) {
		return (15);
	}
	/* 12 m */
	if ((freq >= band12LowFreq) && (freq <= band12HighFreq)) {
		return (12);
	}
	/* 10 m */
	if ((freq >= band10LowFreq) && (freq <= band10HighFreq)) {
		return (10);
	}
	/* 6 m */
	if ((freq >= band6LowFreq) && (freq <= band6HighFreq)) {
		return (6);
	}
	/* 2 m */
	if ((freq >= band2LowFreq) && (freq <= band2HighFreq)) {
		return (2);
	}
	/* 0.7 m */
	if ((freq >= band07LowFreq) && (freq <= band07HighFreq)) {
		return (1);
	}

	return (0);
}

/* ------------------------------------------------------------------------------------ */
void DisplayDraw(uint8_t band, uint32_t freq) {
	int a = 0, b = 0, c = 0, d = 0, e = 0, f = 0;

	char strFreq[10];
	char strBand[4];
	long _f = freq / 1000;

	memset(strFreq, 0, sizeof(strFreq));
	memset(strFreq, 0, sizeof(strBand));

	if (_f > 1000 && _f < 10000) {
		a = (_f / 1000);
		b = (_f / 100) % 10;
		c = (_f / 10) % 10;
		d = _f % 10;
		sprintf(strFreq, "%d%c%d%d%d", a, '.', b, c, d);
	} else if (_f > 10000 && _f < 100000) {
		a = (_f / 10000);
		b = (_f / 1000) % 10;
		c = (_f / 100) % 10;
		d = (_f / 10) % 10;
		e = _f % 10;
		sprintf(strFreq, "%d%d%c%d%d%d", a, b, '.', c, d, e);
	} else if (_f > 100000 && _f < 1000000) {
		a = (_f / 100000);
		b = (_f / 10000) % 10;
		c = (_f / 1000) % 10;
		d = (_f / 100) % 10;
		e = (_f / 10) % 10;
		f = _f % 10;
		sprintf(strFreq, "%d%d%d%c%d%d%d", a, b, c, '.', d, e, f);
	}

#ifdef LCD16X2
	LCD_SetPos(0,0);
	LCD_String("BAND ");
	LCD_String("     ");
	LCD_SetPos(5,0);
#endif
	if (band != 0) {
		sprintf(strBand, "%d", band);
#ifdef LCD16X2
		LCD_String(strBand);
#endif
	} else if (freq != 0) {
#ifdef LCD16X2
		LCD_String(("NONE"));
#endif
	}

	if ((freq > band160LowFreq) && (freq < band07HighFreq)) {
#ifdef LCD16X2
		LCD_SetPos(0,1);
		LCD_String("FREQ ");
		LCD_String("          ");
		LCD_SetPos(5,1);
		LCD_String(strFreq);
#endif
#ifdef SSD1306
		ssd1306_Fill(Black);
		ssd1306_SetCursor(10, 20);
		ssd1306_WriteString(strFreq, Font_16x26, White);
		ssd1306_UpdateScreen();
#endif
	} else {
#ifdef LCD16X2
		LCD_SetPos(0,1);
		LCD_String("               ");
#endif
#ifdef SSD1306
		ssd1306_Fill(Black);
		ssd1306_UpdateScreen();
#endif
	}
}

/* ---------------------------------------------------------------------------------------------- */
void IcomOutToPort(uint8_t command, long f, uint8_t toAddress) {
	/* default controller address. */
	static const uint8_t fromAdress = 0xE0;

	static char arrFreq[12]; /* > 10 */
	static uint8_t icom_p[12]; /* 11 (data) + (1  end string \0) */
	static char x[3];

	static int hz1_10 = 0;
	static int hz100_1000 = 0;
	static int khz100_10 = 0;
	static int mhz10_1 = 0;
	static int mhz100_1000 = 0;

	memset(icom_p, 0, sizeof(icom_p));
	memset(arrFreq, 0, sizeof(arrFreq));
	sprintf(arrFreq, "%ld", f);

	/* 10 Hz..1 Hz */
	memset(x, 0, sizeof(x));
	x[0] = arrFreq[8];
	x[1] = arrFreq[9];
	x[2] = '\0';
	hz1_10 = atoi(x);

	/* 1000..100 Hz */
	memset(x, 0, sizeof(x));
	x[0] = arrFreq[6];
	x[1] = arrFreq[7];
	x[2] = '\0';
	hz100_1000 = atoi(x);

	/* 100..10 KHz */
	memset(x, 0, sizeof(x));
	x[0] = arrFreq[4];
	x[1] = arrFreq[5];
	x[2] = '\0';
	khz100_10 = atoi(x);

	/* 10..1 MHz */
	memset(x, 0, sizeof(x));
	x[0] = arrFreq[2];
	x[1] = arrFreq[3];
	x[2] = '\0';
	mhz10_1 = atoi(x);

	/* 100..1000 MHz = > END => FD */
	memset(x, 0, sizeof(x));
	x[0] = arrFreq[0];
	x[1] = arrFreq[1];
	x[2] = '\0';
	mhz100_1000 = atoi(x);

	icom_p[0] = 0xFE;
	icom_p[1] = 0xFE;
	icom_p[2] = toAddress;
	icom_p[3] = fromAdress;
	icom_p[4] = command;

	icom_p[5] = (((hz1_10 / 10) << 4) | (hz1_10 % 10));
	icom_p[6] = (((hz100_1000 / 10) << 4) | (hz100_1000 % 10));
	icom_p[7] = (((khz100_10 / 10) << 4) | (khz100_10 % 10));
	icom_p[8] = (((mhz10_1 / 10) << 4) | (mhz10_1 % 10));
	icom_p[9] = (((mhz100_1000 / 10) << 4) | (mhz100_1000 % 10));

	icom_p[10] = 0xFD;

	/* UART3 */
	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t *) icom_p, sizeof(icom_p) - 1) != HAL_OK) {
		Error_Handler();
	}
	while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX_RX);
}

/* ---------------------------------------------------------------------------------------------- */
void IcomOutToPortMod(uint8_t cmd, uint8_t address, uint8_t mod) {
	uint8_t cmdStr[9] = { 0xFE, 0xFE, address, 0xE0, cmd, mod, 0x00, 0xFD, '\0' }; /* FE FE 00 E0 cmd 07 00 FD */

	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t *) cmdStr, sizeof(cmdStr) - 1) != HAL_OK) {
		Error_Handler();
	}
	while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX_RX);
}

/* ----------------------------------------------------------------------------------------------------- */
void IcomOutToPortOK(uint8_t address) {
	uint8_t ok_msg[7] = { 0xFE, 0xFE, address, 0xE0, 0xFB, 0xFD, '\0' };

	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t *) ok_msg, sizeof(ok_msg) - 1) != HAL_OK) {
		Error_Handler();
	}
	while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX_RX);
}

/* ----------------------------------------------------------------------------------------------------- */
void IcomOutToPortNG(uint8_t address) {
	uint8_t ng_msg[7] = { 0xFE, 0xFE, address, 0xE0, 0xFA, 0xFD, '\0' };

	if (HAL_UART_Transmit_DMA(&huart3, (uint8_t *) ng_msg, sizeof(ng_msg) - 1) != HAL_OK) {
		Error_Handler();
	}
	while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX_RX);
}

/* ------------------------------------------------------------------------------------------------ */
void IcomCivEmulator(uint32_t freq) {

	HAL_UART_Receive(&huart3, (uint8_t *) icom_request_buf, sizeof(icom_request_buf), 100);

	/* Freq request. */
	if (icom_request_buf[0] == 0xFE && icom_request_buf[1] == 0xFE
			&& icom_request_buf[2] == 0xE0 && icom_request_buf[4] == 0x03 && /* CMD  read freq. */
			icom_request_buf[5] == 0xFD) {
		IcomOutToPortOK(icom_request_buf[3]); /* icom OK msg. */
		IcomOutToPort(0x03, freq, icom_request_buf[3]);
	}

	/* Mode request. */
	else if (icom_request_buf[0] == 0xFE && icom_request_buf[1] == 0xFE
			&& icom_request_buf[2] == 0xE0 && icom_request_buf[4] == 0x04 && /* CMD  read mode. */
			icom_request_buf[5] == 0xFD) {
		IcomOutToPortOK(icom_request_buf[3]); /* icom OK msg. */
		IcomOutToPortMod(0x04, icom_request_buf[3], 0x07);
	}

	/* Not supported command */
	else {
		IcomOutToPortNG(icom_request_buf[3]); /* icom NEGATIVE msg. */
	}
}

/* ---------------------------------------------------------------------------------------------- */
void KenwoodOutToPort(uint32_t freq) {
	static char arrFreq[20];

	memset(arrFreq, 0, sizeof(arrFreq));
	sprintf(arrFreq, "%s%ld%s", "FA", freq, ";");
	if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *) arrFreq, strlen(arrFreq) ) != HAL_OK) {
		Error_Handler();
	}
	while (HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX_RX);
}

/* ---------------------------------------------------------------------------------------------- */
void KenwoodRequest() {
	static const uint8_t str[] = "FA;";

	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *) str, sizeof(str) - 1) != HAL_OK) {
		Error_Handler();
	}
	while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX_RX);
}

/* ------------------------------------------------------------------------------------------------ */
bool CheckLoggerActive(uint8_t *catBuffer) {
	uint16_t j = 0;

	/* IF; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (j + 3 < KENWOODCATLEN) {
			if (catBuffer[j] == 'I' && catBuffer[j + 1] == 'F' && catBuffer[j + 2] == ';') {
				return true;
			}
		}
	}

	/* FA; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (j + 3 < KENWOODCATLEN) {
			if (catBuffer[j] == 'F' && catBuffer[j + 1] == 'A' && catBuffer[j + 2] == ';') {
				return true;
			}
		}
	}

	/* FB; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (j + 3 < KENWOODCATLEN) {
			if (catBuffer[j] == 'F' && catBuffer[j + 1] == 'B' && catBuffer[j + 2] == ';') {
				return true;
			}
		}
	}

	/* find  IFxxxxxxxxxxxxxxxx; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (j + 37 < KENWOODCATLEN) {
			if (catBuffer[j] == 'I' && catBuffer[j + 1] == 'F' && catBuffer[j + 37] == ';') {
				return true;
			}
		}
	}

	/* find  FAxxxxxxxxxxxxxxxx; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (j + 13 < KENWOODCATLEN) {
			if (catBuffer[j] == 'F' && catBuffer[j + 1] == 'A' && catBuffer[j + 37] == ';') {
				return true;
			}
		}
	}

	/* find  FBxxxxxxxxxxxxxxxx; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (j + 13 < KENWOODCATLEN) {
			if (catBuffer[j] == 'F' && catBuffer[j + 1] == 'B' && catBuffer[j + 37] == ';') {
				return true;
			}
		}
	}

	return false;
}

/* ------------------------------------------------------------------------------------------------ */
void FlushCatBuffers(uint8_t *buf1, uint8_t *buf2) {
	memset((void *) buf1, 0, KENWOODCATLEN);
	memset((void *) buf2, 0, KENWOODCATLEN);
}

/* ------------------------------------------------------------------------------------------------ */
void DisplayText(char *text) {
#ifdef SSD1306
	ssd1306_Fill(Black);
	ssd1306_SetCursor(10, 20);
	ssd1306_WriteString(text, Font_16x26, White);
	ssd1306_UpdateScreen();
#endif

#ifdef LCD16X2
	LCD_Clear();
	LCD_SetPos(0,0);
	LCD_String(text);
#endif
}

/* ---------------------------------------------------------------------------------------------- */
uint32_t readKenwoodCat(uint8_t *catBuffer) {
	uint8_t tmp[12];
	int i = 0, j = 0, x = 0;
	long f = 0;

	/* find IF , not IF; */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (catBuffer[j] == 'I' && catBuffer[j + 1] == 'F' && catBuffer[j + 2] != ';') {
			break;
		}
	}
	if (j + 37 < KENWOODCATLEN) {
		/* Long response 37 bytes */
		if (catBuffer[j + 0] == 'I' && catBuffer[j + 1] == 'F' && catBuffer[j + 37] == ';') {
			memset(tmp, 0, sizeof(tmp));
			x = 0;
			/* 3-13 position to freq  */
			for (i = 2 + j; i <= 12 + j; i++) {
				tmp[x] = catBuffer[i];
				x++;
			}
			f = atol((const char *) tmp);
			if (f > 1500000 && f < 450000000) {
				return (f);
			}
		}
	}

	/* find "FA" , not "FA;" */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (catBuffer[j] == 'F' && catBuffer[j + 1] == 'A' && catBuffer[j + 2] != ';') {
			break;
		}
	}
	if (j + 13 < KENWOODCATLEN) {
		/* Short response (13 bytes) */
		if (catBuffer[j + 0] == 'F' && catBuffer[j + 1] == 'A' && catBuffer[j + 13] == ';') {
			memset(tmp, 0, sizeof(tmp));
			x = 0;
			/* 3-13 position to freq */
			for (i = 2 + j; i <= 12 + j; i++) {
				tmp[x] = catBuffer[i];
				x++;
			}
			f = atol((const char *) tmp);
			if (f > 1500000 && f < 450000000) {
				return (f);
			}
		}
	}

	/* find "FB" , not "FB;" */
	for (j = 0; j < KENWOODCATLEN; j++) {
		if (catBuffer[j] == 'F' && catBuffer[j + 1] == 'B' && catBuffer[j + 2] != ';') {
			break;
		}
	}
	if (j + 13 < KENWOODCATLEN) {
		/* Short response (13 bytes) */
		if (catBuffer[j + 0] == 'F' && catBuffer[j + 1] == 'B' && catBuffer[j + 13] == ';') {
			memset(tmp, 0, sizeof(tmp));
			x = 0;
			/* 3-13 position to freq */
			for (i = 2 + j; i <= 12 + j; i++) {
				tmp[x] = catBuffer[i];
				x++;
			}
			f = atol((const char *) tmp);
			if (f > 1500000 && f < 450000000) {
				return (f);
			}
		}
	}

	return (0);
}

